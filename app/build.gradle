import com.github.triplet.gradle.androidpublisher.ReleaseStatus

apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-parcelize'
apply plugin: 'com.google.firebase.appdistribution'
apply plugin: "com.github.triplet.play"
apply from: "../scripts/versions.gradle"

android {
    compileSdkVersion rootProject.compileSdkVersion
    defaultConfig {
        applicationId "jp.co.soramitsu.fearless"
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode computeVersionCode()
        versionName computeVersionName()
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    signingConfigs {
      ci {
          storeFile file(System.env.CI_KEYSTORE_PATH ?: "stub")
          storePassword System.env.CI_KEYSTORE_PASS ?: ""
          keyAlias System.env.CI_KEYSTORE_KEY_ALIAS ?: ""
          keyPassword System.env.CI_KEYSTORE_KEY_PASS ?: ""
      }
    }
    buildTypes {
        debug {
            applicationIdSuffix '.debug'
            versionNameSuffix '-debug'
        }
        release {
            minifyEnabled minifyRelease
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.ci
        }
        staging {
            initWith debug
            signingConfig signingConfigs.ci
            matchingFallbacks = ['debug']
            versionNameSuffix '-staging'
            applicationIdSuffix '.staging'
            //Init firebase
            def localReleaseNotes = releaseNotes()
            def localFirebaseGroup = firebaseGroup()
            firebaseAppDistribution {
                releaseNotes = localReleaseNotes
                groups = localFirebaseGroup
            }
        }
        develop {
            signingConfig signingConfigs.ci
            matchingFallbacks = ['debug']
            versionNameSuffix '-develop'
            applicationIdSuffix '.dev'
            //Init firebase
            def localReleaseNotes = releaseNotes()
            def localFirebaseGroup = firebaseGroup()
            firebaseAppDistribution {
              releaseNotes = localReleaseNotes
              groups = localFirebaseGroup
            }
        }
        pr {
            signingConfig signingConfigs.ci
            matchingFallbacks = ['debug']
            versionNameSuffix '-pr'
            applicationIdSuffix '.dev'
            //Init firebase
            def localReleaseNotes = releaseNotes()
            def localFirebaseGroup = firebaseGroup()
            firebaseAppDistribution {
              releaseNotes = localReleaseNotes
              groups = localFirebaseGroup
            }
        }
    }

    buildFeatures {
        viewBinding = true
        compose true
    }

    bundle {
        language {
            enableSplit = false
        }
    }

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }

    kotlinOptions {
        freeCompilerArgs = ["-Xallow-result-return-type"]

        jvmTarget = '1.8'
    }
    composeOptions {
        kotlinCompilerExtensionVersion composeCompilerVersion
    }
    lintOptions {
        disable "Instantiatable"
    }
    namespace 'jp.co.soramitsu.app'
}

play {
    serviceAccountCredentials = file(System.env.CI_PLAY_KEY ?: "../key/fake.json")
    track = "production"
    releaseStatus = ReleaseStatus.DRAFT
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':core-db')
    implementation project(':common')
    implementation project(':feature-splash')

    implementation project(':feature-onboarding-api')
    implementation project(':feature-onboarding-impl')
    implementation project(':feature-account-api')

    implementation project(':feature-account-impl')

    implementation project(':feature-wallet-api')
    implementation project(':feature-wallet-impl')

    implementation project(':runtime')

    implementation project(':feature-staking-api')
    implementation project(':feature-staking-impl')

    implementation project(':feature-crowdloan-api')
    implementation project(':feature-crowdloan-impl')

    implementation project(':feature-polkaswap-api')
    implementation project(':feature-polkaswap-impl')

    implementation kotlinDep

    implementation androidDep
    implementation constraintDep

    implementation zXingEmbeddedDep

    implementation navigationFragmentDep
    implementation navigationUiDep

    implementation roomDep

    implementation fearlessLibDep

    implementation daggerDep
    kapt daggerKapt

    implementation lifecycleProcessDep
    kapt lifecycleKapt

    implementation lifeCycleKtxDep

    implementation retrofitDep
    implementation gsonConvertedDep

    implementation gifDep

    compileOnly wsDep

    implementation coroutinesDep

    testImplementation project(':test-shared')

    implementation insetterDep

    implementation liveDataKtxDep

    implementation jnaDep
    implementation beaconDep, withoutJna

    kaptAndroidTest daggerKapt
    implementation storiesDep

    implementation compose
    debugImplementation composeDebug

    androidTestImplementation androidTestRunnerDep
    androidTestImplementation androidTestRulesDep
    androidTestImplementation androidJunitDep
}

task printVersion {
  doLast {
    println "versionName:${computeVersionName()}"
  }
}
