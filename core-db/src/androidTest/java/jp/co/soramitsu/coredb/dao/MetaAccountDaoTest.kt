package jp.co.soramitsu.coredb.dao

import androidx.test.ext.junit.runners.AndroidJUnit4
import jp.co.soramitsu.core.models.CryptoType
import jp.co.soramitsu.coredb.AppDatabase
import jp.co.soramitsu.coredb.model.MetaAccountLocal
import kotlinx.coroutines.runBlocking
import org.junit.Assert.assertEquals
import org.junit.Assert.assertTrue
import org.junit.Before
import org.junit.Test
import org.junit.runner.RunWith

private const val CHAIN_ID = "1"

@RunWith(AndroidJUnit4::class)
class MetaAccountDaoTest : DaoTest<MetaAccountDao>(AppDatabase::metaAccountDao) {

    private val chainDao by lazy {
        db.chainDao()
    }

    @Before
    fun insertChain() = runBlocking {
        chainDao.addChain(createTestChain(id = CHAIN_ID))
    }

    @Test
    fun shouldInsertMetaAccount() {
        runBlocking {
            dao.insertMetaAccount(testMetaAccount())
            dao.insertMetaAccount(testMetaAccount())

            val accountsFromDb = dao.getMetaAccounts()

            assertEquals(2, accountsFromDb.size)

            val isIdAutoGenerated = accountsFromDb.withIndex().all { (index, account) ->
                account.id == index + 1L
            }

            assertTrue("Id should be autogenerated", isIdAutoGenerated)
        }
    }

    private fun testMetaAccount() = MetaAccountLocal(
        tonPublicKey = null,
        substratePublicKey = byteArrayOf(),
        substrateCryptoType = CryptoType.SR25519,
        ethereumPublicKey = null,
        name = "Test",
        isSelected = false,
        substrateAccountId = byteArrayOf(),
        ethereumAddress = null,
        position = 0,
        googleBackupAddress = null,
        isBackedUp = false,
        initialized = false
    )
}
